/*
 Generated by typeshare 1.11.0
*/

export type EndpointAddr = string;

/**
 * # Interest
 * ## Glob Match Interest
 * (/)?(<path>|<*>|<**>)/*
 */
export type Interest = string;

export type MessageId = string;

export type NodeId = string;

export type Subject = string;

/** code are expect to be a valid utf8 string */
export type TopicCode = string;

export interface EdgeEndpointOffline {
	topic_code: TopicCode;
	endpoint: EndpointAddr;
}

export interface EdgeEndpointOnline {
	topic_code: TopicCode;
	interests: Interest[];
}

export enum EdgeErrorKind {
	Decode = "Decode",
	TopicNotFound = "TopicNotFound",
	EndpointNotFound = "EndpointNotFound",
	Unauthorized = "Unauthorized",
	Internal = "Internal",
}

export interface EdgeError {
	context: string;
	message?: string;
	kind: EdgeErrorKind;
}

export enum MessageAckExpectKind {
	Sent = "Sent",
	Received = "Received",
	Processed = "Processed",
}

export enum MessageTargetKind {
	Durable = "Durable",
	Online = "Online",
	Push = "Push",
}

export interface MessageDurableConfig {
	expire: Date;
	max_receiver?: number;
}

export interface EdgeMessageHeader {
	ack_kind: MessageAckExpectKind;
	target_kind: MessageTargetKind;
	durability?: MessageDurableConfig;
	subjects: Subject[];
	topic: TopicCode;
}

export interface EdgeMessage {
	header: EdgeMessageHeader;
	payload: string;
}

export type EdgeRequestEnum = 
	| { kind: "SendMessage", content: EdgeMessage }
	| { kind: "EndpointOnline", content: EdgeEndpointOnline }
	| { kind: "EndpointOffline", content: EdgeEndpointOffline }
	| { kind: "EndpointInterest", content: EndpointInterest }
	| { kind: "SetState", content: SetState };

export interface EdgeRequest {
	seq_id: number;
	request: EdgeRequestEnum;
}

export type EdgeResult<T, E> = 
	| { kind: "Ok", content: T }
	| { kind: "Err", content: E };

export type EdgeResponseEnum = 
	| { kind: "SendMessage", content: EdgeResult<WaitAckSuccess, WaitAckError> }
	| { kind: "EndpointOnline", content: EndpointAddr }
	| { kind: "EndpointOffline", content?: undefined }
	| { kind: "EndpointInterest", content?: undefined }
	| { kind: "SetState", content?: undefined };

export interface EdgeResponse {
	seq_id: number;
	result: EdgeResult<EdgeResponseEnum, EdgeError>;
}

export interface EndpointInterest {
	topic_code: TopicCode;
	endpoint: EndpointAddr;
	interests: Interest[];
}

export interface MessageHeader {
	message_id: MessageId;
	ack_kind: MessageAckExpectKind;
	target_kind: MessageTargetKind;
	durability?: MessageDurableConfig;
	subjects: Subject[];
}

export interface Message {
	header: MessageHeader;
	payload: string;
}

export enum MessageStatusKind {
	Sending = "Sending",
	Unsent = "Unsent",
	Sent = "Sent",
	Received = "Received",
	Processed = "Processed",
	Failed = "Failed",
	Unreachable = "Unreachable",
}

export interface MessageStateUpdate {
	message_id: MessageId;
	status: Record<EndpointAddr, MessageStatusKind>;
}

export interface SetState {
	topic: TopicCode;
	update: MessageStateUpdate;
}

export enum WaitAckErrorException {
	MessageDropped = "MessageDropped",
	Overflow = "Overflow",
	NoAvailableTarget = "NoAvailableTarget",
	DurableMessageWithoutConfig = "DurableMessageWithoutConfig",
	DurableMessageExpired = "DurableMessageExpired",
}

export interface WaitAckError {
	status: Record<EndpointAddr, MessageStatusKind>;
	exception?: WaitAckErrorException;
}

export interface WaitAckSuccess {
	status: Record<EndpointAddr, MessageStatusKind>;
}

export type EdgePayload = 
	| { kind: "Push", content: EdgePush }
	| { kind: "Response", content: EdgeResponse }
	| { kind: "Request", content: EdgeRequest }
	| { kind: "Error", content: EdgeError };

export type EdgePush = 
	| { kind: "Message", content: {
	endpoints: EndpointAddr[];
	message: Message;
}};

